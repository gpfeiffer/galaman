<% content_for :level do %>
  <h3><%= @swimmer.name %></h3>
  <ul>
    <% @entries.each_key do |discipline| %>
      <li><%= link_to_unless_current discipline.distance_course_stroke, swimmer_path(@swimmer, :discipline_id => discipline) %></li>
    <% end %>
  </ul>
<% end %>

<% results = @entries[discipline].map(&:result) %>
<% best = best_result(results) %>

<h3><%= link_to @swimmer.name, @swimmer %>
(<%= link_to @swimmer.club.symbol, @swimmer.club %>)</h3>

<%= content_tag :div, nil, :id => "dob", :dob => @swimmer.birthday, :distance => discipline.distance %> 

<h1><%= discipline.distance_course_stroke %></h1>

<div>
<b>PB: <%= best %></b>
</div>

<br />

<style>	
  ul.tabs { padding:0; margin:0;}

  .tabs li {
      list-style:none;
      display:inline;
  }
      
  .tabs a {
      padding:2px 4px;
      display:inline-block;
      color:#fff;
      text-decoration:none;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      outline-style: none;
  }
     
  .tabs a.active {
      border-top: 1px solid #000000;
      border-left: 1px solid #000000;
      border-right: 1px solid #000000;
      background:#fff;
      color:#000;
  }
</style>


<ul class="tabs">
<li><a href="#svg-1">3 years</a></li>
<li><a href="#svg-2">10 years</a></li>
</ul>
<div id="svg-1"></div>
<div id="svg-2"></div>
<br />

<% if results %>
<h2>Individual Results and Aims</h2>

<table class="fact-sheet">
<tr class="fact-major" x="0" y="0">
<th>Date</th>
<th>Competition</th>
<th>Time</th>
</tr>
  <% results.sort_by(&:date).reverse_each do |result| %>
    <%= content_tag :tr, :class => "fact-major", :x => result.x, :y => result.y do %>
      <td><%= result.date %></td>
      <td><%= link_to result.entry.event.competition.name, result.entry.subject %></td>
      <td align="right"><%= result %></td>
    <% end %>
  <% end %>

  <% if @swimmer.aims.any? and can? :show, @swimmer.aims.first %>
<tr class="fact-title" x="0" y="0"><th colspan="3">Aims</th></tr>
  <% @swimmer.aims.each do |aim| %>
    <% if can? :view, aim %>
      <% qt = aim.qualification.qualification_times.find_all_by_discipline_id(discipline.id).select { |x| x.age_range.include?(@swimmer.age(aim.date)) }.first %>
      <% if qt %>
        <tr class="fact-major" x="0" y="0">
          <td><%= aim.date %></td>
          <td align="right">
            <%= aim.qualification.name %>
          </td>
          <td align="right">
            <%= content_tag(:span, :title => time_to_msc(qt.time-best.time)) { qt.to_s } if best %>
          </td>
        </tr>
      <% end %>
    <% end %>
  <% end %>
  <% end %>

</table>
<br />
<% end %>

<div id="qualification">
<% names = ["B", "A", "Division 2", "Division 1", "Connacht Squad", "British Gas", "FINA Base"] %>

<% names.each_with_index do |name, index| %> 
<% qualification = Qualification.find_by_name(name) %>
<% qualification_times = QualificationTime.find_all_by_discipline_id_and_qualification_id(discipline.id, qualification.id) %>
<% if qualification_times %>
<table>
<% qualification_times.each do |qt| %>
<tr class="time" name="<%= name %>" color="<%= index %>" time="<%= 10*qt.time %>" from="<%= @swimmer.date_of_age(qt.age_min) %>" duration="<%= qt.age_max - qt.age_min + 1 %>">
</tr>
<% end %>
</table>
<% end %>
<% end %>
</div>

<style type="text/css">
path {
  stroke: steelblue;
  stroke-width: 2;
  fill: none;
}

line {
  stroke: black;
}
      
text {
 font-family: Arial;
 font-size: 9pt;
}
      
.axis path,
.axis line {
  fill: none;
  stroke: black;
  stroke-width: 1;
  shape-rendering: crispEdges;
}
      
.axis text {
  font-family: sans-serif;
  font-size: 11px;
}
</style>


<script>
var timeFormat = d3.time.format("%M:%S");
var dateFormat = d3.time.format("%d/%m/%Y")

var data = d3.selectAll("tr.fact-major")[0]
    .map(function(x) {return [dateFormat.parse(d3.select(x).attr("x")), +(d3.select(x).attr("y"))];})
    .filter(function(x) { return x[1] > 0; } )

var w = 600,
    h = 300,
    padding = 20;

var yScale = d3.time.scale()
    .domain([ 
      d3.min(data, function(d) { return d[1]; })*0.95,
      d3.min(data, function(d) { return d[1]; })*1.20,
//      d3.max(data, function(d) { return d[1]; })*1.05
    ])
    .range([0, h-padding]);

var color = [
"#aec7e8",
"#ffbb78",
"#98df8a",
"#ff9896",
"#c5b0d5",
"#c49c94",
"#f7b6d2",
"#c7c7c7",
"#dbdb8d",
"#9edae5",
]

var mindate = new Date();
mindate.setFullYear(mindate.getFullYear() - 2)
var maxdate = new Date();
maxdate.setFullYear(maxdate.getFullYear() + 1)

var xScale = d3.time.scale()
    .domain([mindate, maxdate])
    .range([0, w]);

// qualification times
var qualification = d3.select("#qualification").selectAll("tr.time")[0]
    .map(function(x) { return { 
        "time": +d3.select(x).attr("time"),
        "name": d3.select(x).attr("name"),
        "from": dateFormat.parse(d3.select(x).attr("from")),
        "duration": +d3.select(x).attr("duration"),
        "color": +d3.select(x).attr("color")
    }; })
      
var svg = d3.select("#svg-1").append("svg")
    .attr("width", w)
    .attr("height", h)
    .style("border", "1px solid black")
    .style("background-color", "snow");

svg.selectAll("rect")
    .data(qualification)
    .enter()
  .append("rect")
    .attr("x", function(d) {
      return xScale(d.from);
    })
    .attr("y", function(d) {
      return yScale(0);
    })
    .attr("width", function(d) {
      return d.duration * 200;  // FIXME: *compute* the width of a year
    })
    .attr("height", function(d) {
      return yScale(d.time) - yScale(0)
    })
    .attr("fill", function(d) {
      return color[d.color];
    })
  .append("title")
    .text(function(d) {
      return d.name + "\n" + timeFormat(new Date(d.time)) + "." + ("000"+d.time).slice(-3,-1);
    });

// add path
var g = svg.append("g");

var line = d3.svg.line()
    .interpolate("cardinal")
    .tension(0.8)
    .x(function(d,i) { return xScale(d[0]); })
    .y(function(d,i) { return yScale(d[1]); });

g.append("path").attr("d", line(data));

// add circles
svg.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", function(d) {
        return xScale(d[0]);
    })
    .attr("cy", function(d) {
         return yScale(d[1]);
    })
    .attr("r", 3)
    .append("title")
    .text(function(d) {
        return dateFormat(d[0]) + ":\n" + timeFormat(new Date(d[1])) + "." + ("000"+d[1]).slice(-3,-1);
    });

// add x-axis
var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .ticks(6)
    .tickFormat(dateFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h-padding) + ")")
    .call(xAxis)
  .append("text")
    .attr("x", xScale(maxdate))
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("date");

// add y-axis
var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("right")
    .ticks(5)
    .tickFormat(timeFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + (2*w/3) + ",0)")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("time");

</script>

<script>
var timeFormat = d3.time.format("%M:%S");
var dateFormat = d3.time.format("%d/%m/%Y")

var data = d3.selectAll("tr.fact-major")[0]
    .map(function(x) {return [dateFormat.parse(d3.select(x).attr("x")), +(d3.select(x).attr("y"))];})
    .filter(function(x) { return x[1] > 0; } )

var w = 600,
    h = 300,
    padding = 20;

var distance = d3.select("#dob").attr("distance")

var yScale = d3.time.scale()
    .domain([ 
      distance * 400,
      distance * 1200
    ])
    .range([0, h-padding]);

var color = [
"#aec7e8",
"#ffbb78",
"#98df8a",
"#ff9896",
"#c5b0d5",
"#c49c94",
"#f7b6d2",
"#c7c7c7",
"#dbdb8d",
"#9edae5",
]

var date = (d3.select("#dob").attr("dob"))
var parts = date.match(/(\d+)/g)
var mindate = new Date(parts[2], parts[1]-1, parts[0])
mindate.setFullYear(mindate.getFullYear() + 9)
var maxdate = new Date(parts[2], parts[1]-1, parts[0])
maxdate.setFullYear(maxdate.getFullYear() + 19)

var xScale = d3.time.scale()
    .domain([mindate, maxdate])
    .range([0, w]);

// qualification times
var qualification = d3.select("#qualification").selectAll("tr.time")[0]
    .map(function(x) { return { 
        "time": +d3.select(x).attr("time"),
        "name": d3.select(x).attr("name"),
        "from": dateFormat.parse(d3.select(x).attr("from")),
        "duration": +d3.select(x).attr("duration"),
        "color": +d3.select(x).attr("color")
    }; })
      
var svg = d3.select("#svg-2").append("svg")
    .attr("width", w)
    .attr("height", h)
    .style("border", "1px solid black")
    .style("background-color", "snow");

svg.selectAll("rect")
    .data(qualification)
    .enter()
  .append("rect")
    .attr("x", function(d) {
      return xScale(d.from);
    })
    .attr("y", function(d) {
      return yScale(0);
    })
    .attr("width", function(d) {
      return d.duration * 60;  // FIXME: *compute* the width of a year
    })
    .attr("height", function(d) {
      return yScale(d.time) - yScale(0)
    })
    .attr("fill", function(d) {
      return color[d.color];
    })
  .append("title")
    .text(function(d) {
      return d.name + "\n" + timeFormat(new Date(d.time)) + "." + ("000"+d.time).slice(-3,-1);
    });

// add path
var g = svg.append("g");

var line = d3.svg.line()
    .interpolate("cardinal")
    .tension(0.8)
    .x(function(d,i) { return xScale(d[0]); })
    .y(function(d,i) { return yScale(d[1]); });

g.append("path").attr("d", line(data));

// add circles
svg.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", function(d) {
        return xScale(d[0]);
    })
    .attr("cy", function(d) {
         return yScale(d[1]);
    })
    .attr("r", 3)
    .append("title")
    .text(function(d) {
        return dateFormat(d[0]) + ":\n" + timeFormat(new Date(d[1])) + "." + ("000"+d[1]).slice(-3,-1);
    });

// add x-axis
var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .ticks(6)
    .tickFormat(dateFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h-padding) + ")")
    .call(xAxis)
  .append("text")
    .attr("x", xScale(maxdate))
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("date");

// add y-axis
var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("right")
    .ticks(5)
    .tickFormat(timeFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + ((new Date() - mindate)*w/(maxdate - mindate)) + ",0)")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("time");

</script>

<script>
$('ul.tabs').each(function(){
    // For each set of tabs, we want to keep track of
    // which tab is active and it's associated content
    var $active, $content, $links = $(this).find('a');

    // If the location.hash matches one of the links, use that as the active tab.
    // If no match is found, use the first link as the initial active tab.
    $active = $($links.filter('[href="'+location.hash+'"]')[0] || $links[0]);
    $active.addClass('active');
    $content = $($active.attr('href'));

    // Hide the remaining content
    $links.not($active).each(function () {
        $($(this).attr('href')).hide();
    });

    // Bind the click event handler
    $(this).on('click', 'a', function(e){
        // Make the old tab inactive.
        $active.removeClass('active');
        $content.hide();

        // Update the variables with the new link and content
        $active = $(this);
        $content = $($(this).attr('href'));

        // Make the tab active.
        $active.addClass('active');
        $content.show();

        // Prevent the anchor's default click action
        e.preventDefault();
    });
});
</script>

<br />
<hr />

<%= link_to 'Back', :back %>
