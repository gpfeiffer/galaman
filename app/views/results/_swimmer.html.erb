<p id="notice"><%= notice %></p>

<%= swimmer.name %>
(<%= swimmer.club.symbol %>)

<h2>Individual Results.</h2>
<% r = @results %>
<% discipline = @discipline %>
<table class="fact-sheet">
  <tr class="fact-major">
    <td colspan="2">
      <b>
        <%= discipline.stroke %>
        <%= discipline.distance %>m 
        <%= discipline.course %>
      </b>
    </td>
    <td align="right"><%= best_result(r[discipline]) %></td>
  </tr>

  <% r[discipline].sort_by { |x| x.entry.event.competition.date }.each do |result| %>
    <tr class="fact-minor" x="<%= result.x %>" y="<%= result.y %>">
      <td><%= result.entry.event.competition.date %></td>
      <td><%= result.entry.event.competition.name %></td>
      <td align="right"><%= result %></td>
    </tr>
  <% end %>
  <% if current_user.admin? || session[:senior] %>
    <tr>
      <td colspan="3">
        <div id="svg"></div>
      </td>
    </tr>
  <% end %>
  <% if current_user.admin? || @swimmer.user_ids.include?(session[:user_id]) %>
    <% @swimmer.aims.each do |aim| %>
      <% qt = aim.qualification.qualification_times.select { |x| x.discipline == discipline and x.age_range.include?(@swimmer.age(aim.date)) }.first %>
      <% if qt %>
        <tr class="fact-minor" x="0" y="0">
          <td><%= aim.date %></td>
          <td align="right">
            <%= aim.qualification.name %>
          </td>
          <td align="right">
            <span title="<%= time_to_msc(qt.time-best_result(r[discipline]).time) %>">
              <%= qt %>
            </span>
          </td>
        </tr>
      <% end %>
    <% end %>
  <% end %>

</table>
<br />


<div id="qualification">
<% names = ["B", "A", "Division 2", "Division 1", "Connacht Squad", "British Gas", "FINA Base"] %>

<% names.each_with_index do |name, index| %> 
<% qualification = Qualification.find_by_name(name) %>
<% qualification_times = QualificationTime.find_all_by_discipline_id_and_qualification_id(discipline.id, qualification.id) %>
<% if qualification_times %>
<table>
<!--
<tr>
<th><%= name %></th>
<th>from</th>
<th>duration</th>
</tr>
-->
<% qualification_times.each do |qt| %>
<tr class="time" name="<%= name %>" color="<%= index %>" time="<%= 10*qt.time %>" from="<%= swimmer.date_of_age(qt.age_min) %>" duration="<%= qt.age_max - qt.age_min + 1 %>">
<!--
<td><%= time_to_msc(qt.time) %></td>
<td><%= swimmer.date_of_age(qt.age_min) %></td>
<td><%= qt.age_max - qt.age_min + 1 %></td>
-->
</tr>
<% end %>
</table>
<% end %>
<% end %>
</div>

<style type="text/css">
path {
  stroke: steelblue;
  stroke-width: 2;
  fill: none;
}

line {
  stroke: black;
}
      
text {
 font-family: Arial;
 font-size: 9pt;
}
      
.axis path,
.axis line {
  fill: none;
  stroke: black;
  stroke-width: 1;
  shape-rendering: crispEdges;
}
      
.axis text {
  font-family: sans-serif;
  font-size: 11px;
}
</style>

<script>
var timeFormat = d3.time.format("%M:%S");
var dateFormat = d3.time.format("%d/%m/%Y")

var data = d3.selectAll("tr.fact-minor")[0]
    .map(function(x) {return [dateFormat.parse(d3.select(x).attr("x")), +(d3.select(x).attr("y"))];})
    .select(function(x) { return x[1] > 0; } )

var w = 600,
    h = 300,
    padding = 20;

var yScale = d3.time.scale()
    .domain([ 
      d3.min(data, function(d) { return d[1]; })*0.75,
      d3.max(data, function(d) { return d[1]; })*1.05
    ])
    .range([0, h-padding]);

var color = [
"#aec7e8",
"#ffbb78",
"#98df8a",
"#ff9896",
"#c5b0d5",
"#c49c94",
"#f7b6d2",
"#c7c7c7",
"#dbdb8d",
"#9edae5",
]

var mindate = new Date();
mindate.setFullYear(mindate.getFullYear() - 2)
var maxdate = new Date();
maxdate.setFullYear(maxdate.getFullYear() + 1)

var xScale = d3.time.scale()
    .domain([mindate, maxdate])
    .range([0, w]);

// qualification times
var qualification = d3.select("#qualification").selectAll("tr.time")[0]
    .map(function(x) { return { 
        "time": +d3.select(x).attr("time"),
        "name": d3.select(x).attr("name"),
        "from": dateFormat.parse(d3.select(x).attr("from")),
        "duration": +d3.select(x).attr("duration"),
        "color": +d3.select(x).attr("color")
    }; })
      
var svg = d3.select("#svg").append("svg")
    .attr("width", w)
    .attr("height", h)
    .style("background-color", "snow");

svg.selectAll("rect")
    .data(qualification)
    .enter()
  .append("rect")
    .attr("x", function(d) {
      return xScale(d.from);
    })
    .attr("y", function(d) {
      return yScale(0);
    })
    .attr("width", function(d) {
      return d.duration * 200;  // FIXME: *compute* the width of a year
    })
    .attr("height", function(d) {
      return yScale(d.time) - yScale(0)
    })
    .attr("fill", function(d) {
      return color[d.color];
    })
  .append("title")
    .text(function(d) {
      return d.name + "\n" + timeFormat(new Date(d.time)) + "." + ("000"+d.time).slice(-3,-1);
    });

// add path
var g = svg.append("g");

var line = d3.svg.line()
    .interpolate("cardinal")
    .tension(0.8)
    .x(function(d,i) { return xScale(d[0]); })
    .y(function(d,i) { return yScale(d[1]); });

g.append("path").attr("d", line(data));

// add circles
svg.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", function(d) {
        return xScale(d[0]);
    })
    .attr("cy", function(d) {
         return yScale(d[1]);
    })
    .attr("r", 3)
    .append("title")
    .text(function(d) {
        return dateFormat(d[0]) + ":\n" + timeFormat(new Date(d[1])) + "." + ("000"+d[1]).slice(-3,-1);
    });

// add x-axis
var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .ticks(6)
    .tickFormat(dateFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h-padding) + ")")
    .call(xAxis)
  .append("text")
    .attr("x", xScale(maxdate))
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("date");

// add y-axis
var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("right")
    .ticks(5)
    .tickFormat(timeFormat);  

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + (2*w/3) + ",0)")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("dy", "-.5em")
    .style("text-anchor", "end")
    .text("time");

</script>
<br />
<hr />
