def t(m, s, c='x')
  if c == 'x'
    c, s, m = s, m, 0
  end
  100*(60*m+s)+c
end

COURSES = ["LC", "SC"]

AGE_MIN = {
"FEMALE" => [0, 13, 15, 17],
  "MALE" => [0, 14, 16, 18]
}

AGE_MAX = {
"FEMALE" => [12, 14, 16, 99],
  "MALE" => [13, 15, 17, 99]
}

STROKES = {
  "FC" => "Freestyle",
  "BC" => "Backstroke",
  "BRS" => "Breaststroke",
  "FLY" => "Butterfly",
  "IM" => "Ind Medley"
}

DIVISION1 = {
  "FEMALE" => {
"50 FC" => [
t(30,39),
t(29,79),
],
"100 FC" => [
t(1,10,62),
t(1, 9,24),
t(1, 6,62),
t(1, 5,31),
t(1, 5,17),
t(1, 3,89),
t(1, 5, 7),
t(1, 3,79),
],
"200 FC" => [
t(2,34,11),
t(2,31, 9),
t(2,25,67),
t(2,22,81),
t(2,23,83),
t(2,21, 1),
t(2,21,48),
t(2,18,71),
],
"400 FC" => [
t(5,31,21),
t(5,24,72),
t(5, 9,60),
t(5, 3,53),
t(5, 3,65),
t(4,57,70),
t(5, 1, 3),
t(4,55,13),
],
"800 FC" => [
t(11,53,37),
t(11,39,38),
t(10,40, 5),
t(10,27,50),
t(10,19,15),
t(10, 7, 1),
t(10, 7,99),
t(9,56, 7),
],
"50 BC" => [
t(35,17),
t(34,48),
],
"100 BC" => [
t(1,22,41),
t(1,20,79),
t(1,17,58),
t(1,16, 6),
t(1,15,44),
t(1,13,96),
t(1,14, 0),
t(1,12,55),
],
"200 BC" => [
t(2,56,48),
t(2,53, 2),
t(2,47,72),
t(2,44,43),
t(2,46,19),
t(2,42,93),
t(2,39,36),
t(2,36,24),
],
"50 BRS" => [
t(39,30),
t(38,53),
],
"100 BRS" => [
t(1,34,51),
t(1,32,66),
t(1,30,21),
t(1,28,44),
t(1,28,64),
t(1,26,90),
t(1,24,90),
t(1,23,24),
],
"200 BRS" => [
t(3,24,52),
t(3,20,51),
t(3,14, 6),
t(3,10,25),
t(3, 6,40),
t(3, 2,75),
t(3, 4,57),
t(3, 0,95),
],
"50 FLY" => [
t(31,87),
t(31,25),
],
"100 FLY" => [
t(1,23, 1),
t(1,21,38),
t(1,16,67),
t(1,15,17),
t(1,14,17),
t(1,12,72),
t(1,12, 1),
t(1,10,60),
],
"200 FLY" => [
t(3, 9,88),
t(3, 6,16),
t(2,51, 8),
t(2,47,73),
t(2,41,35),
t(2,38,19),
t(2,39,88),
t(2,36,75),
],
"200 IM" => [
t(2,59,44),
t(2,55,92),
t(2,48,99),
t(2,45,68),
t(2,45,36),
t(2,42,12),
t(2,37,92),
t(2,34,82),
],
"400 IM" => [
t(6,17,65),
t(6,10,25),
t(6, 1, 7),
t(5,53,99),
t(5,43,69),
t(5,36,95),
t(5,39,47),
t(5,32,81),
],
  },
  "MALE" => {
"50 FC" => [
t(26,81),
t(26,28),
],
"100 FC" => [
t(1, 8,33),
t(1, 6,99),
t(1, 3,33),
t(1, 2, 9),
t(59,64),
t(58,47),
t(58,16),
t(57, 2),
],
"200 FC" => [
t(2,30,58),
t(2,27,63),
t(2,18,92),
t(2,16,20),
t(2,12,19),
t(2, 9,60),
t(2, 8,80),
t(2, 6,27),
],
"400 FC" => [
t(5,18,84),
t(5,12,59),
t(4,55,48),
t(4,49,69),
t(4,46,42),
t(4,40,80),
t(4,42,64),
t(4,37,10),
],
"1500 FC" => [
t(21,38,62),
t(21,13,16),
t(19,15,16),
t(18,52,51),
t(18,41,60),
t(18,19,61),
t(18,22, 8),
t(18, 0,47),
],
"50 BC" => [
t(30,93),
t(30,32),
],
"100 BC" => [
t(1,18,69),
t(1,17,15),
t(1,13,18),
t(1,11,75),
t(1,11,71),
t(1,10,30),
t(1, 8,45),
t(1, 7,11),
],
"200 BC" => [
t(2,50,89),
t(2,47,54),
t(2,38,89),
t(2,35,77),
t(2,29,24),
t(2,26,31),
t(2,28,57),
t(2,25,66),
],
"50 BRS" => [
t(33, 3),
t(32,38),
],
"100 BRS" => [
t(1,32,70),
t(1,30,88),
t(1,24,53),
t(1,22,87),
t(1,21,77),
t(1,20,17),
t(1,15,83),
t(1,14,43),
],
"200 BRS" => [
t(3,23,45),
t(3,19,46),
t(3, 2,38),
t(2,58,80),
t(2,53,93),
t(2,50,52),
t(2,51,58),
t(2,48,22),
],
"50 FLY" => [
t(28,20),
t(27,65),
],
"100 FLY" => [
t(1,21,47),
t(1,19,87),
t(1,11,37),
t(1, 9,97),
t(1, 7, 6),
t(1, 5,75),
t(1, 4,15),
t(1, 2,89),
],
"200 FLY" => [
t(2,58,39),
t(2,54,89),
t(2,41, 9),
t(2,37,93),
t(2,29,66),
t(2,26,73),
t(2,29,66),
t(2,26,73),
],
"200 IM" => [
t(2,49,35),
t(2,46, 3),
t(2,39,70),
t(2,36,57),
t(2,29,75),
t(2,26,81),
t(2,25,21),
t(2,22,36),
],
"400 IM" => [
t(5,56,94),
t(5,49,94),
t(5,36,84),
t(5,30,24),
t(5,11,94),
t(5, 5,82),
t(5,10,24),
t(5, 4,16),
],
  }
}

q = Qualification.find_by_name("Division 1")
ac = ApplicationController.new

DIVISION1.each do |gender, disciplines|
  disciplines.each do |distance_stroke, times|
    (distance, stroke) = distance_stroke.split(" ")
    times.each_with_index do |time, i|
      discipline_hash = { 
        'gender' => gender[0].downcase, 
        'distance' => distance,  
        'course' => COURSES[i % 2], 
        'stroke' => STROKES[stroke], 
        'mode' => 'I' 
      }
      puts discipline_hash.inspect
      id = ac.find_discipline_id(discipline_hash)
      puts ":id => '%d', :discipline => '%s' :time => '%s', :age_min => '%s', :age_max => '%s'"  % [id, Discipline.find(id), time, AGE_MIN[gender][i/2], AGE_MAX[gender][i/2]]
      if distance.to_i == 50
        QualificationTime.create({ :qualification_id => q.id, :discipline_id => id, :age_min => AGE_MIN[gender][3+i/2].to_s, :age_max => AGE_MAX[gender][3+i/2].to_s, :time => time.to_s })
      else
        QualificationTime.create({ :qualification_id => q.id, :discipline_id => id, :age_min => AGE_MIN[gender][i/2].to_s, :age_max => AGE_MAX[gender][i/2].to_s, :time => time.to_s })
      end
    end
  end
end
